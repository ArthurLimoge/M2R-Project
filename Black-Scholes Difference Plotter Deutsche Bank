import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#import datetime
from scipy.stats import norm

#open the file in read mode
cols_list=["Date","Close"]
df=pd.read_csv('DB.csv', header=0)
    
col_a=list(df.Matdiff)
col_b=list(df.Close)


def different_plotter_wrt_time(start):
    #choose a given time and initialise other values
    start_time=col_a[start]
    S=col_b[start]
    E=S
    #interest rate - taken from TradingEconomics
    r=0.0184
    #volatility - we use the implied volatility value obtained from Barchart on Tuesday 9th June
    sigma=0.8004
    #choose variables relating to it
    tau_vals=np.linspace(0,start_time,start_time+1)
    t_vals=start_time*np.ones(len(tau_vals))-tau_vals
     #essential values for our calculation
    d1_vals=(np.log(S/E)+(r+(1/2)*sigma**2)*tau_vals)/(sigma*np.sqrt(tau_vals))
    d2_vals=(np.log(S/E)+(r-(1/2)*sigma**2)*tau_vals)/(sigma*np.sqrt(tau_vals))
    #values of normal distribution
    n1_vals=norm.cdf(d1_vals)
    n2_vals=norm.cdf(d2_vals)
    #using the relationship we obtain from solving the Black-Scholes equation
    C_vals=S*n1_vals-E*np.exp(-r*tau_vals)*n2_vals
    
    #actual values of times and stock prices
    real_ts=col_a[start:]
    real_Cs=col_b[start:]
    
    #plot
    plt.plot(t_vals,C_vals,'b',real_ts,real_Cs,'r')
    plt.title('Time vs call price')
    plt.xlabel('t/days')
    plt.ylabel('C/$')
    return 'Graph plotted'

def error_plotter_wrt_time(start):#choose a given time and initialise other values
    start_time=col_a[start]
    S=col_b[start]
    E=S
    #interest rate - taken from TradingEconomics
    r=0.0184
    #volatility - we use the implied volatility value obtained from Barchart on Tuesday 9th June
    sigma=0.8004
    #choose variables relating to it
    real_ts=col_a[start:]
    real_taus=start_time*np.ones(len(real_ts))-real_ts
     #essential values for our calculation
    d1_vals=(np.log(S/E)+(r+(1/2)*sigma**2)*real_taus)/(sigma*np.sqrt(real_taus))
    d2_vals=(np.log(S/E)+(r-(1/2)*sigma**2)*real_taus)/(sigma*np.sqrt(real_taus))
    #values of normal distribution
    n1_vals=norm.cdf(d1_vals)
    n2_vals=norm.cdf(d2_vals)
    #using the relationship we obtain from solving the Black-Scholes equation
    C_vals=S*n1_vals-E*np.exp(-r*real_taus)*n2_vals
    
    #actual values of times and stock prices
    real_Cs=col_b[start:]
    
    #errors
    error_Cs=real_Cs-C_vals
    
    #plot errors
    plt.plot(real_ts,error_Cs,'b')
    plt.title('Difference between actual price and Black-Scholes predicted price ')
    plt.xlabel('t')
    plt.ylabel('Difference (actual-BS)')
    return 'Graph plotted'
    
    
